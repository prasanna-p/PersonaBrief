# This workflow will build a docker container, publish it to Google Container
# Registry, and deploy it to GKE when there is a push to the "main"
# branch.
#
# To configure this workflow:
#
# 1. Enable the following Google Cloud APIs:
#
#    - Artifact Registry (artifactregistry.googleapis.com)
#    - Google Kubernetes Engine (container.googleapis.com)
#    - IAM Credentials API (iamcredentials.googleapis.com)
#
#    You can learn more about enabling APIs at
#    https://support.google.com/googleapi/answer/6158841.
#
# 2. Ensure that your repository contains the necessary configuration for your
#    Google Kubernetes Engine cluster, including deployment.yml,
#    kustomization.yml, service.yml, etc.
#
# 3. Create and configure a Workload Identity Provider for GitHub:
#    https://github.com/google-github-actions/auth#preferred-direct-workload-identity-federation.
#
#    Depending on how you authenticate, you will need to grant an IAM principal
#    permissions on Google Cloud:
#
#    - Artifact Registry Administrator (roles/artifactregistry.admin)
#    - Kubernetes Engine Developer (roles/container.developer)
#
#    You can learn more about setting IAM permissions at
#    https://cloud.google.com/iam/docs/manage-access-other-resources
#
# 5. Change the values in the "env" block to match your values.

name: 'Build and Deploy to GKE'

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment (e.g., dev, prod)'
        required: true
        default: 'dev'

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }} # TODO: update to your Google Cloud project ID
  WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.GCP_WIF_PROVIDER }} # TODO: update to your workload identity provider
  GAR_LOCATION: ${{ secrets.LOCATION }}
  REPOSITORY: ${{ secrets.REPO_NAME }}
  IMAGE: ${{ secrets.IMAGE }}
  GCLOUD_PROJECT: ${{ secrets.GCP_PROJECT_ID }}
  ZONE_ID: ${{ secrets.ZONE_ID }}
  CLUSTER_NAME: ${{ secrets.CLUSTER_NAME }}
  GCP_SERVICE_ACCOUNT: ${{ secrets.GCP_SERVICE_ACCOUNT }}

jobs:
  setup-build-publish-deploy:
    name: 'Setup, Build, Publish, and Deploy'
    runs-on: 'ubuntu-latest'
    environment: 'production'

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    
      - name: 'Create .env File Securely'
        run: |
          echo "${{ secrets.ENV_FILE }}" > .env
          echo ".env file created"
          cat .env

      - name: Use .env File
        run: |
          set -a  # Automatically export variables
          source .env
          set +a
          echo "Using environment variables"
          echo "ZONE: $ZONE"
          echo "CLUSTER: $CLUSTER_NAME"

      - name: 'Checkout'
        uses: 'actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332' # actions/checkout@v4

      # Configure Workload Identity Federation and generate an access token.
      #
      # See https://github.com/google-github-actions/auth for more options,
      # including authenticating via a JSON credentials file.
      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@f112390a2df9932162083945e46d439060d66ec2' # google-github-actions/auth@v2
        with:
          workload_identity_provider: '${{ env.WORKLOAD_IDENTITY_PROVIDER }}'
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      # Authenticate Docker to Google Cloud Artifact Registry
      - name: 'Docker Auth'
        uses: 'docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567' # docker/login-action@v3
        with:
          username: 'oauth2accesstoken'
          password: '${{ steps.auth.outputs.auth_token }}'
          registry: '${{ env.GAR_LOCATION }}-docker.pkg.dev'


      - name: 'Setup Artifact Registry Authentication'
        run: |
          gcloud auth configure-docker us-central1-docker.pkg.dev --quiet

      # Get the GKE credentials so we can deploy to the cluster
      - name: 'Set up GKE credentials'
        uses: 'google-github-actions/get-gke-credentials@6051de21ad50fbb1767bc93c11357a49082ad116' # google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: '${{ env.CLUSTER_NAME }}'
          location: '${{ env.ZONE_ID }}'

      # Build the Docker image
      - name: 'Build and push Docker container'
        run: |-
          DOCKER_TAG="us-central1.pkg.dev/peak-stream-449519-r4/persona-app/llm-app:${{ github.sha }}"
          docker build \
            --tag "${DOCKER_TAG}" \
            --build-arg GITHUB_SHA="${GITHUB_SHA}" \
            --build-arg GITHUB_REF="${GITHUB_REF}" \
            ./app

          docker push "${DOCKER_TAG}"

      # Set up envs for values.yaml
      - name: 'Set REPO_NAME And TAG'
        run: |
           EXPORT REPO_NAME="${GAR_LOCATION}-docker.pkg.dev/${PROJECT_ID}/${REPOSITORY}/${IMAGE}"
           EXPORT TAG="${GITHUB_SHA}"
           envsubst < helm/values.template.yaml > k8s/app_chart/values.yaml
           
      # Deploy the helm chart
      - name: Deploy with Helm
        run: |
          helm upgrade --install persona-brief ./app_chart \
          --values app_chart/values.yaml --namespace "$NAMESPACE"
      
